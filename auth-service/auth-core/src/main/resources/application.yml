server:
  port: 9000
  servlet:
    context-path: /api/auth

spring:
  application:
    name: auth-service
  datasource:
    url: jdbc:postgresql://localhost:5432/auth?createDatabaseIfNotExist=true
    username: norberttalpos
    password: Passw0rd
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
    generate-ddl: true
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: 33c14229ed27bb1f8a69
            clientSecret: 70d8b3f9f33dda9c59df46d21aaefc0915275c68
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
          google:
            clientId: 926734784941-nnn182noqkq26j2ud72ia0vsqmb8ibhg.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true

springdoc:
  packagesToScan: com.norberttalpos.auth